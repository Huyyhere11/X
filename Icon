local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")

local redzlib = {Save = {}}

local UIScale = 1

local ScreenGui = Create("ScreenGui", CoreGui, {
    Name = "NexoraX",
}, {
    Create("UIScale", {
        Scale = UIScale,
        Name = "Scale"
    })
})

local ScreenFind = CoreGui:FindFirstChild(ScreenGui.Name)
if ScreenFind and ScreenFind ~= ScreenGui then
    ScreenFind:Destroy()
end

local function SaveJson(FileName, save)
    if writefile then
        local json = HttpService:JSONEncode(save)
        writefile(FileName, json)
    end
end

local Flags = {}

local Settings = {
    DragSpeed = .1,
    Duration = .25,
    EasingStyle = Enum.EasingStyle.Quart,
    EasingDirection = Enum.EasingDirection.Out,
    ScriptFile = false,
}

local function Create(ClassName, Parent, Properties, Childrens)
    local Object = Instance.new(ClassName)
    Object.Parent = Parent
    
    if typeof(Properties) == "table" then
        for Property, Value in pairs(Properties) do
            Object[Property] = Value
        end
    end
    
    if typeof(Childrens) == "table" then
        for _, Child in pairs(Childrens) do
            Child.Parent = Object
        end
    end
    
    return Object
end

local function GetXY(GuiObject)
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local Max, Min = GuiObject.AbsoluteSize, GuiObject.AbsolutePosition
    local x, y = math.clamp((Mouse.X - Min.X) / Max.X, 0, 1), math.clamp((Mouse.Y - Min.Y) / Max.Y, 0, 1)
    return x,y
end

local function Corner(Size, Parent)
    return Create("UICorner", Parent, {
        CornerRadius = UDim.new(Size or 0, 0)
    })
end

local function Stroke(Color, Parent, Mode)
    return Create("UIStroke", Parent, {
        ApplyStrokeMode = Mode or Enum.ApplyStrokeMode.Border,
        Color = Color or Color3.fromRGB(255, 255, 255),
        Thickness = 1
    })
end

local Themes = {
    ["Dark"] = {
        Color3.fromRGB(20,20,20),
        Color3.fromRGB(30,30,30),
        Color3.fromRGB(40,40,40),
        Color3.fromRGB(255,255,255),
    },
    ["Light"] = {
        Color3.fromRGB(240,240,240),
        Color3.fromRGB(230,230,230),
        Color3.fromRGB(220,220,220),
        Color3.fromRGB(0,0,0),
    }
}

local function VerifyTheme(Name)
    return Themes[Name] and Name or "Dark"
end

function redzlib:MakeWindow(Configs)
    local WTitle = Configs[1] or Configs.Name or Configs.Title or "NexoraX"
    local WMiniText = Configs[2] or Configs.SubTitle or "by : redz9999"
    
    Settings.ScriptFile = Configs[3] or Configs.SaveFolder or false
    
    local function LoadFile()
        local File = Settings.ScriptFile
        if type(File) ~= "string" then return end
        if not readfile or not isfile then return end
        local s, r = pcall(isfile, File)
        
        if s and r then
            local s, _Flags = pcall(readfile, File)
            
            if s and type(_Flags) == "string" then
                local s,r = pcall(function() return HttpService:JSONDecode(_Flags) end)
                Flags = s and r or {}
            end
        end
    end;LoadFile()
    
    local Window = Create("Frame", ScreenGui, {
        Size = UDim2.fromOffset(550, 400),
        Position = UDim2.fromScale(.5,.5),
        AnchorPoint = Vector2.new(.5,.5),
        BackgroundColor3 = Color3.fromRGB(20,20,20),
        ClipsDescendants = true,
    }, {
        Corner(.025),
        Create("Frame", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1,0,0,30),
            Name = "Top",
        }, {
            Corner(.5),
            Create("TextLabel", {
                BackgroundTransparency = 1,
                Text = WTitle,
                TextColor3 = Color3.fromRGB(255,255,255),
                Size = UDim2.new(0,0,1,0),
                Position = UDim2.new(0,10,0,0),
                Font = Enum.Font.SourceSansBold,
                TextSize = 16,
                Name = "Title",
            }),
            Create("TextLabel", {
                BackgroundTransparency = 1,
                Text = WMiniText,
                TextColor3 = Color3.fromRGB(150,150,150),
                Size = UDim2.new(0,0,1,0),
                Position = UDim2.new(0,10 + Window.Top.Title.TextBounds.X + 5,0,0),
                Font = Enum.Font.SourceSansBold,
                TextSize = 14,
                Name = "MiniText",
            }),
            Create("ImageButton", {
                Size = UDim2.fromOffset(16,16),
                Position = UDim2.new(1,-10,0,7),
                AnchorPoint = Vector2.new(1,0),
                BackgroundTransparency = 1,
                Image = "rbxassetid://7072725342",
                Name = "Close",
            }),
            Create("ImageButton", {
                Size = UDim2.fromOffset(16,16),
                Position = UDim2.new(1,-30,0,7),
                AnchorPoint = Vector2.new(1,0),
                BackgroundTransparency = 1,
                Image = "rbxassetid://13101085860",
                Name = "Collapse",
            })
        })
    })
    
    local Main = Create("Frame", Window, {
        Size = UDim2.new(1,0,1,-30),
        Position = UDim2.fromOffset(0,30),
        BackgroundTransparency = 1,
        Name = "Main",
    }, {
        Create("Frame", {
            Size = UDim2.new(0,150,1,0),
            BackgroundColor3 = Color3.fromRGB(30,30,30),
            Name = "TabList",
        }, {
            Corner(.05),
            Create("ScrollingFrame", {
                Size = UDim2.new(1,-10,1,-10),
                Position = UDim2.fromOffset(5,5),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                ScrollBarThickness = 0,
                CanvasSize = UDim2.new(),
                Name = "Container",
            }, {
                Create("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0,5),
                })
            })
        }),
        Create("Frame", {
            Size = UDim2.new(1,-150,1,0),
            Position = UDim2.fromOffset(150,0),
            BackgroundTransparency = 1,
            Name = "Pages",
        }, {
            Corner(.025)
        })
    })
    
    local function Drag()
        local DragStart, StartPos
        
        local Connection1, Connection2
        
        Connection1 = Window.Top.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                DragStart = input.Position
                StartPos = Window.Position
                
                if Connection2 then Connection2:Disconnect() end
                Connection2 = UserInputService.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                        local Delta = input.Position - DragStart
                        TweenService:Create(Window,TweenInfo.new(Settings.DragSpeed,Settings.EasingStyle,Settings.EasingDirection),{Position = UDim2.fromScale(StartPos.X.Scale + (Delta.X/(ScreenGui.AbsoluteSize.X/UIScale)), StartPos.Y.Scale + (Delta.Y/(ScreenGui.AbsoluteSize.Y/UIScale)))}):Play()
                    end
                end)
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        Connection2:Disconnect()
                    end
                end)
            end
        end)
        
        return function()
            Connection1:Disconnect()
            if Connection2 then Connection2:Disconnect() end
        end
    end; Drag()
    
    local WindowTable = {Tabs = {}}
    
    Window.Top.Close.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)
    
    Window.Top.Collapse.MouseButton1Click:Connect(function()
        WindowTable:Collapse(not Window.Main.Visible)
    end)
    
    local function Save(file)
        if readfile and isfile and isfile(file) then
            local decode = HttpService:JSONDecode(readfile(file))
            
            if type(decode) == "table" then
                if rawget(decode, "UISize") then redzlib.Save["UISize"] = decode["UISize"] end
                if rawget(decode, "TabSize") then redzlib.Save["TabSize"] = decode["TabSize"] end
                if rawget(decode, "Theme") and VerifyTheme(decode["Theme"]) then redzlib.Save["Theme"] = decode["Theme"] end
            end
        end
    end
    
    local function Load()
        local File = Settings.ScriptFile
        
        if Window and File then
            SaveJson(File, {
                UISize = {Window.Size.X.Offset, Window.Size.Y.Offset},
                TabSize = {Main.TabList.Size.X.Offset, Main.TabList.Size.Y.Offset},
                Theme = redzlib.Save["Theme"] or "Dark",
                Flags = Flags
            })
        end
    end
    
    pcall(Save, "NexoraX.json")
    game:GetService("RunService").RenderStepped:Connect(Load)
    
    function WindowTable:MakeTab(Configs)
        local TTitle = Configs[1] or Configs.Title or Configs.Name or "Tab"
        local TImage = Configs[2] or Configs.Icon or Configs.Image or ""
        
        local Tab = Create("TextButton", Main.TabList.Container, {
            Size = UDim2.new(1,0,0,25),
            BackgroundColor3 = Color3.fromRGB(40,40,40),
            Text = "",
            AutoButtonColor = false,
        }, {
            Corner(.15),
            Stroke(Color3.fromRGB(40,40,40)),
            Create("ImageLabel", {
                Size = UDim2.fromOffset(16,16),
                Position = UDim2.new(0,5,0,4),
                BackgroundTransparency = 1,
                Image = TImage,
                Name = "Icon",
            }),
            Create("TextLabel", {
                Size = UDim2.new(1,-30,1,0),
                Position = UDim2.fromOffset(25,0),
                BackgroundTransparency = 1,
                Text = TTitle,
                TextColor3 = Color3.fromRGB(255,255,255),
                Font = Enum.Font.SourceSansBold,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Name = "Title",
            })
        })
        
        local Page = Create("ScrollingFrame", Main.Pages, {
            Size = UDim2.new(1,-10,1,-10),
            Position = UDim2.fromOffset(5,5),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 2,
            CanvasSize = UDim2.new(),
            Visible = false,
            Name = TTitle,
        }, {
            Create("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0,5),
            })
        })
        
        WindowTable.Tabs[#WindowTable.Tabs+1] = {Tab,Page}
        
        local TabTable = {}
        
        Tab.MouseButton1Click:Connect(function()
            for _,v in pairs(WindowTable.Tabs) do
                v[2].Visible = v[1] == Tab
                TweenService:Create(v[1], TweenInfo.new(.25, Settings.EasingStyle, Settings.EasingDirection), {BackgroundColor3 = v[1] == Tab and Color3.fromRGB(60,60,60) or Color3.fromRGB(40,40,40)}):Play()
            end
        end)
        
        function TabTable:AddSection(Title)
            local Section = Create("Frame", Page, {
                Size = UDim2.new(1,0,0,25),
                BackgroundTransparency = 1,
            }, {
                Create("TextLabel", {
                    Size = UDim2.new(1,0,0,25),
                    BackgroundTransparency = 1,
                    Text = Title or "Section",
                    TextColor3 = Color3.fromRGB(255,255,255),
                    Font = Enum.Font.SourceSansBold,
                    TextSize = 16,
                })
            })
            
            local Container = Create("Frame", Page, {
                Size = UDim2.new(1,0,0,0),
                BackgroundTransparency = 1,
            }, {
                Create("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0,5),
                })
            })
            
            local SectionTable = {}
            
            function SectionTable:AddButton(Configs)
                local BTitle = Configs[1] or Configs.Title or Configs.Name or "Button"
                local BDesc = Configs[2] or Configs.Description or Configs.Desc or ""
                local BCallback = Configs[3] or Configs.Callback or function() end
                
                local Button = Create("TextButton", Container, {
                    Size = UDim2.new(1,0,0,BDesc ~= "" and 50 or 25),
                    BackgroundColor3 = Color3.fromRGB(40,40,40),
                    Text = "",
                    AutoButtonColor = false,
                }, {
                    Corner(.15),
                    Stroke(Color3.fromRGB(40,40,40)),
                    Create("TextLabel", {
                        Size = UDim2.new(1,-10,0,25),
                        Position = UDim2.fromOffset(5,0),
                        BackgroundTransparency = 1,
                        Text = BTitle,
                        TextColor3 = Color3.fromRGB(255,255,255),
                        Font = Enum.Font.SourceSansBold,
                        TextSize = 14,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Name = "Title",
                    }),
                    Create("TextLabel", {
                        Size = UDim2.new(1,-10,0,25),
                        Position = UDim2.fromOffset(5,20),
                        BackgroundTransparency = 1,
                        Text = BDesc,
                        TextColor3 = Color3.fromRGB(150,150,150),
                        Font = Enum.Font.SourceSans,
                        TextSize = 12,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Visible = BDesc ~= "",
                        Name = "Desc",
                    })
                })
                
                Button.MouseButton1Click:Connect(BCallback)
                
                Container.Size = UDim2.new(1,0,0,Container.UIListLayout.AbsoluteContentSize.Y)
                Page.CanvasSize = UDim2.new(0,0,0,Page.UIListLayout.AbsoluteContentSize.Y)
            end
            
            function SectionTable:AddToggle(Configs)
                local TTitle = Configs[1] or Configs.Title or Configs.Name or "Toggle"
                local TDesc = Configs[2] or Configs.Description or Configs.Desc or ""
                local TDefault = Configs[3] or Configs.Default or false
                local TCallback = Configs[4] or Configs.Callback or function() end
                local TFlag = Configs[5] or Configs.Flag
                
                local Toggle = Create("TextButton", Container, {
                    Size = UDim2.new(1,0,0,TDesc ~= "" and 50 or 25),
                    BackgroundColor3 = Color3.fromRGB(40,40,40),
                    Text = "",
                    AutoButtonColor = false,
                }, {
                    Corner(.15),
                    Stroke(Color3.fromRGB(40,40,40)),
                    Create("TextLabel", {
                        Size = UDim2.new(1,-40,0,25),
                        Position = UDim2.fromOffset(5,0),
                        BackgroundTransparency = 1,
                        Text = TTitle,
                        TextColor3 = Color3.fromRGB(255,255,255),
                        Font = Enum.Font.SourceSansBold,
                        TextSize = 14,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Name = "Title",
                    }),
                    Create("TextLabel", {
                        Size = UDim2.new(1,-10,0,25),
                        Position = UDim2.fromOffset(5,20),
                        BackgroundTransparency = 1,
                        Text = TDesc,
                        TextColor3 = Color3.fromRGB(150,150,150),
                        Font = Enum.Font.SourceSans,
                        TextSize = 12,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Visible = TDesc ~= "",
                        Name = "Desc",
                    }),
                    Create("Frame", {
                        Size = UDim2.fromOffset(25,15),
                        Position = UDim2.new(1,-30,0,5),
                        BackgroundColor3 = TDefault and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0),
                        Name = "Indicator",
                    }, {
                        Corner(.25)
                    })
                })
                
                local Value = TDefault
                
                if TFlag then Flags[TFlag] = Value end
                
                Toggle.MouseButton1Click:Connect(function()
                    Value = not Value
                    TweenService:Create(Toggle.Indicator, TweenInfo.new(.25, Settings.EasingStyle, Settings.EasingDirection), {BackgroundColor3 = Value and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)}):Play()
                    if TFlag then Flags[TFlag] = Value end
                    TCallback(Value)
                end)
                
                Container.Size = UDim2.new(1,0,0,Container.UIListLayout.AbsoluteContentSize.Y)
                Page.CanvasSize = UDim2.new(0,0,0,Page.UIListLayout.AbsoluteContentSize.Y)
            end
            
            function SectionTable:AddSlider(Configs)
                local STitle = Configs[1] or Configs.Title or Configs.Name or "Slider"
                local SDesc = Configs[2] or Configs.Description or Configs.Desc or ""
                local SMin = Configs[3] or Configs.Min or 0
                local SMax = Configs[4] or Configs.Max or 100
                local SIncrease = Configs[5] or Configs.Increase or Configs.Increment or 1
                local SDefault = Configs[6] or Configs.Default or SMin
                local SCallback = Configs[7] or Configs.Callback or function() end
                local SFlag = Configs[8] or Configs.Flag
                
                local Slider = Create("Frame", Container, {
                    Size = UDim2.new(1,0,0,SDesc ~= "" and 60 or 35),
                    BackgroundColor3 = Color3.fromRGB(40,40,40),
                }, {
                    Corner(.15),
                    Stroke(Color3.fromRGB(40,40,40)),
                    Create("TextLabel", {
                        Size = UDim2.new(1,-60,0,25),
                        Position = UDim2.fromOffset(5,0),
                        BackgroundTransparency = 1,
                        Text = STitle,
                        TextColor3 = Color3.fromRGB(255,255,255),
                        Font = Enum.Font.SourceSansBold,
                        TextSize = 14,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Name = "Title",
                    }),
                    Create("TextLabel", {
                        Size = UDim2.new(1,-10,0,25),
                        Position = UDim2.fromOffset(5,20),
                        BackgroundTransparency = 1,
                        Text = SDesc,
                        TextColor3 = Color3.fromRGB(150,150,150),
                        Font = Enum.Font.SourceSans,
                        TextSize = 12,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Visible = SDesc ~= "",
                        Name = "Desc",
                    }),
                    Create("TextLabel", {
                        Size = UDim2.fromOffset(50,25),
                        Position = UDim2.new(1,-55,0,0),
                        BackgroundTransparency = 1,
                        Text = tostring(SDefault),
                        TextColor3 = Color3.fromRGB(255,255,255),
                        Font = Enum.Font.SourceSansBold,
                        TextSize = 14,
                        Name = "Value",
                    }),
                    Create("Frame", {
                        Size = UDim2.new(1,-10,0,5),
                        Position = UDim2.fromOffset(5,SDesc ~= "" and 45 or 20),
                        BackgroundColor3 = Color3.fromRGB(30,30,30),
                        Name = "Bar",
                    }, {
                        Corner(1),
                        Create("Frame", {
                            Size = UDim2.fromScale((SDefault - SMin)/(SMax - SMin), 1),
                            BackgroundColor3 = Color3.fromRGB(255,255,255),
                            Name = "Fill",
                        }, {
                            Corner(1),
                        })
                    })
                })
                
                local Value = SDefault
                
                if SFlag then Flags[SFlag] = Value end
                
                local Dragging = false
                
                Slider.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        Dragging = true
                    end
                end)
                
                Slider.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        Dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if Dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                        local x = GetXY(Slider.Bar)[1]
                        Value = math.floor(SMin + (SMax - SMin) * x / SIncrease + 0.5) * SIncrease
                        Value = math.clamp(Value, SMin, SMax)
                        Slider.Value.Text = tostring(Value)
                        TweenService:Create(Slider.Bar.Fill, TweenInfo.new(.25, Settings.EasingStyle, Settings.EasingDirection), {Size = UDim2.fromScale((Value - SMin)/(SMax - SMin), 1)}):Play()
                        if SFlag then Flags[SFlag] = Value end
                        SCallback(Value)
                    end
                end)
                
                Container.Size = UDim2.new(1,0,0,Container.UIListLayout.AbsoluteContentSize.Y)
                Page.CanvasSize = UDim2.new(0,0,0,Page.UIListLayout.AbsoluteContentSize.Y)
            end
            
            function SectionTable:AddDropdown(Configs)
                local DTitle = Configs[1] or Configs.Title or Configs.Name or "Dropdown"
                local DDesc = Configs[2] or Configs.Description or Configs.Desc or ""
                local DOptions = Configs[3] or Configs.Options or {}
                local DDefault = Configs[4] or Configs.Default or DOptions[1]
                local DMulti = Configs[5] or Configs.Multi or Configs.MultiSelect or false
                local DCallback = Configs[6] or Configs.Callback or function() end
                local DFlag = Configs[7] or Configs.Flag
                
                local Dropdown = Create("Frame", Container, {
                    Size = UDim2.new(1,0,0,DDesc ~= "" and 50 or 25),
                    BackgroundColor3 = Color3.fromRGB(40,40,40),
                }, {
                    Corner(.15),
                    Stroke(Color3.fromRGB(40,40,40)),
                    Create("TextLabel", {
                        Size = UDim2.new(1,-10,0,25),
                        Position = UDim2.fromOffset(5,0),
                        BackgroundTransparency = 1,
                        Text = DTitle,
                        TextColor3 = Color3.fromRGB(255,255,255),
                        Font = Enum.Font.SourceSansBold,
                        TextSize = 14,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Name = "Title",
                    }),
                    Create("TextLabel", {
                        Size = UDim2.new(1,-10,0,25),
                        Position = UDim2.fromOffset(5,20),
                        BackgroundTransparency = 1,
                        Text = DDesc,
                        TextColor3 = Color3.fromRGB(150,150,150),
                        Font = Enum.Font.SourceSans,
                        TextSize = 12,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Visible = DDesc ~= "",
                        Name = "Desc",
                    }),
                    Create("TextButton", {
                        Size = UDim2.fromOffset(100,20),
                        Position = UDim2.new(1,-105,0,DDesc ~= "" and 25 or 2),
                        BackgroundColor3 = Color3.fromRGB(30,30,30),
                        Text = tostring(DDefault),
                        TextColor3 = Color3.fromRGB(255,255,255),
                        Font = Enum.Font.SourceSansBold,
                        TextSize = 14,
                        Name = "Value",
                    }, {
                        Corner(.25),
                        Create("ImageLabel", {
                            Size = UDim2.fromOffset(16,16),
                            Position = UDim2.new(1,-20,0,2),
                            BackgroundTransparency = 1,
                            Image = "rbxassetid://7072706620",
                            Name = "Arrow",
                        })
                    })
                })
                
                local Value = DMulti and {} or DDefault
                
                if DFlag then Flags[DFlag] = Value end
                
                local Dropped = false
                
                local DropFrame = Create("Frame", Dropdown, {
                    Size = UDim2.new(0,100,0,0),
                    Position = UDim2.new(1,-105,0,DDesc ~= "" and 50 or 25),
                    BackgroundColor3 = Color3.fromRGB(30,30,30),
                    Visible = false,
                    ClipsDescendants = true,
                }, {
                    Corner(.25),
                    Create("ScrollingFrame", {
                        Size = UDim2.new(1,-10,1,-10),
                        Position = UDim2.fromOffset(5,5),
                        BackgroundTransparency = 1,
                        BorderSizePixel = 0,
                        ScrollBarThickness = 2,
                        CanvasSize = UDim2.new(),
                        Name = "Container",
                    }, {
                        Create("UIListLayout", {
                            SortOrder = Enum.SortOrder.LayoutOrder,
                            Padding = UDim.new(0,5),
                        })
                    })
                })
                
                local function UpdateDrop()
                    DropFrame.Size = UDim2.new(0,100,0,math.clamp(DropFrame.Container.UIListLayout.AbsoluteContentSize.Y + 10, 0, 100))
                    DropFrame.Container.CanvasSize = UDim2.new(0,0,0,DropFrame.Container.UIListLayout.AbsoluteContentSize.Y)
                end
                
                for _, Option in pairs(DOptions) do
                    local OptionButton = Create("TextButton", DropFrame.Container, {
                        Size = UDim2.new(1,0,0,20),
                        BackgroundColor3 = Color3.fromRGB(40,40,40),
                        Text = tostring(Option),
                        TextColor3 = Color3.fromRGB(255,255,255),
                        Font = Enum.Font.SourceSansBold,
                        TextSize = 14,
                        AutoButtonColor = false,
                    }, {
                        Corner(.25),
                    })
                    
                    OptionButton.MouseButton1Click:Connect(function()
                        if DMulti then
                            if table.find(Value, Option) then
                                table.remove(Value, table.find(Value, Option))
                            else
                                table.insert(Value, Option)
                            end
                            Dropdown.Value.Text = #Value > 0 and table.concat(Value, ", ") or "None"
                        else
                            Value = Option
                            Dropdown.Value.Text = tostring(Value)
                            Dropped = false
                            DropFrame.Visible = false
                        end
                        if DFlag then Flags[DFlag] = Value end
                        DCallback(Value)
                    end)
                end
                
                Dropdown.Value.MouseButton1Click:Connect(function()
                    Dropped = not Dropped
                    DropFrame.Visible = Dropped
                    UpdateDrop()
                end)
                
                Container.Size = UDim2.new(1,0,0,Container.UIListLayout.AbsoluteContentSize.Y)
                Page.CanvasSize = UDim2.new(0,0,0,Page.UIListLayout.AbsoluteContentSize.Y)
            end
            
            return SectionTable
        end
        
        return TabTable
    end
    
    function WindowTable:Collapse(bool)
        Window.Main.Visible = not bool
        TweenService:Create(Window,TweenInfo.new(.25, Settings.EasingStyle, Settings.EasingDirection),{Size = Window.Main.Visible and UDim2.fromOffset(550, 400) or UDim2.fromOffset(550, 30)}):Play()
    end
    
    function WindowTable:SelectTab(index)
        local Tab = WindowTable.Tabs[index]
        if Tab then
            for _,v in pairs(WindowTable.Tabs) do
                v[2].Visible = v[1] == Tab[1]
                TweenService:Create(v[1], TweenInfo.new(.25, Settings.EasingStyle, Settings.EasingDirection), {BackgroundColor3 = v[1] == Tab[1] and Color3.fromRGB(60,60,60) or Color3.fromRGB(40,40,40)}):Play()
            end
        end
    end
    
    return WindowTable
end

return redzlib
